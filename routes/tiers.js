const express = require('express');
const router = express.Router();
const AffiliateTier = require('../models/AffiliateTier');
const { authenticateToken } = require('../middleware/auth'); // Assume admin-only middleware
const moment = require('moment-timezone'); // For date handling

/**
 * @swagger
 * components:
 *   schemas:
 *     Tier:
 *       type: object
 *       required:
 *         - name
 *         - commissionType
 *         - commissionRate
 *         - minReferrals
 *       properties:
 *         name:
 *           type: string
 *           enum: [Basic Tier, Pro Tier, Elite Tier]
 *           description: The name of the tier
 *         commissionType:
 *           type: string
 *           enum: [percent, fixed]
 *           description: The type of commission (percent or fixed amount)
 *         commissionRate:
 *           type: number
 *           description: The commission rate (percentage or fixed amount)
 *         minReferrals:
 *           type: number
 *           description: The minimum number of referrals required
 *         revenusGenerated:
 *           type: number
 *           description: The total revenue generated by affiliates in this tier
 *         bonusPoints:
 *           type: boolean
 *           description: Indicates if bonus points are enabled
 *         specialBadges:
 *           type: boolean
 *           description: Indicates if special badges are enabled
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: The creation date of the tier
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: The last update date of the tier
 *       example:
 *         name: Basic Tier
 *         commissionType: percent
 *         commissionRate: 5
 *         minReferrals: 0
 *         revenusGenerated: 0
 *         bonusPoints: true
 *         specialBadges: false
 *         createdAt: "2025-07-06T20:39:00Z"
 *         updatedAt: "2025-07-06T20:39:00Z"
 */

/**
 * @swagger
 * tags:
 *   name: Tiers
 *   description: API endpoints for managing affiliate tiers
 */

/**
 * @swagger
 * /api/tiers:
 *   get:
 *     summary: Retrieve all existing tiers and initialize if not present
 *     tags: [Tiers]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: A list of tiers
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 tiers:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Tier'
 *       500:
 *         description: Internal server error
 */
router.get('/', authenticateToken, async (req, res) => {
  try {
    const initialTiers = [
      { name: 'Basic Tier', commissionType: 'percent', commissionRate: 5, minReferrals: 0, revenusGenerated: 0, bonusPoints: true, specialBadges: false },
      { name: 'Pro Tier', commissionType: 'percent', commissionRate: 10, minReferrals: 10, revenusGenerated: 0, bonusPoints: true, specialBadges: true },
      { name: 'Elite Tier', commissionType: 'percent', commissionRate: 15, minReferrals: 50, revenusGenerated: 0, bonusPoints: true, specialBadges: true },
    ];

    // Initialize tiers if they don't exist
    for (const tier of initialTiers) {
      const existingTier = await AffiliateTier.findOne({ name: tier.name });
      if (!existingTier) {
        await AffiliateTier.create({ ...tier, createdAt: moment.tz('America/Los_Angeles').toDate(), updatedAt: moment.tz('America/Los_Angeles').toDate() });
        console.log(`Seeded ${tier.name}`);
      } else {
        console.log(`${tier.name} already exists`);
      }
    }

    const tiers = await AffiliateTier.find().sort({ minReferrals: 1 });
    res.json({ tiers });
  } catch (error) {
    console.error('Tier Error:', error);
    res.status(500).json({ error: 'Failed to retrieve tiers' });
  }
});

/**
 * @swagger
 * /api/tiers/{id}:
 *   put:
 *     summary: Update an existing tier
 *     tags: [Tiers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The ID of the tier to update
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 enum: [Basic Tier, Pro Tier, Elite Tier]
 *               commissionType:
 *                 type: string
 *                 enum: [percent, fixed]
 *               commissionRate:
 *                 type: number
 *               minReferrals:
 *                 type: number
 *               revenusGenerated:
 *                 type: number
 *               bonusPoints:
 *                 type: boolean
 *               specialBadges:
 *                 type: boolean
 *             example:
 *               name: Basic Tier
 *               commissionType: percent
 *               commissionRate: 5
 *               minReferrals: 0
 *               revenusGenerated: 100
 *               bonusPoints: true
 *               specialBadges: false
 *     responses:
 *       200:
 *         description: Tier updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 tier:
 *                   $ref: '#/components/schemas/Tier'
 *       400:
 *         description: Invalid tier name
 *       404:
 *         description: Tier not found
 *       500:
 *         description: Internal server error
 */
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { name, commissionType, commissionRate, minReferrals, revenusGenerated, bonusPoints, specialBadges } = req.body;
    // Validate that only existing tiers can be edited
    

    const updateData = {
      name,
      commissionType,
      commissionRate: commissionRate || 0,
      minReferrals,
      revenusGenerated: revenusGenerated || 0,
      bonusPoints: bonusPoints !== undefined ? bonusPoints : false, // Default to false if not provided
      specialBadges: specialBadges !== undefined ? specialBadges : false, // Default to false if not provided
      updatedAt: moment.tz('America/Los_Angeles').toDate(), // 08:39 PM PDT, July 06, 2025
    };

    const tier = await AffiliateTier.findByIdAndUpdate(
      req.params.id,
      { $set: updateData },
      { new: true, runValidators: true }
    );
    if (!tier) return res.status(404).json({ error: 'Tier not found' });
    res.json({ message: 'Tier updated successfully', tier });
  } catch (error) {
    console.error('Tier Error:', error);
    res.status(500).json({ error: 'Failed to update tier' });
  }
});

module.exports = router;